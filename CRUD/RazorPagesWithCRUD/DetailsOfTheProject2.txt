Note: [
	[BindProperty] -> Survive the Journey(). 
					  This Attribute binds with the public property on which it has been decorated.					  
]
0) TagHelpers - Some Tags can be interpeted by Asp.Net's Complier to perform some operations on that tags
	a) Purple Color Tags - This is tags are known as Tag Helper
	b) asp-* - are the tag helper attributes this tag will not be shown in the final html(View Soruce/F12 Design) 
		those are only for the complier to understand given instructions.
		For e.g.
		<input asp-for="Customer.Name"/> // asp-for will be represented in purple color as it is Tag Helper.
		In View Source,
		<input type="text" data-val="true" 
			data-val-length="The field Name must be a string with a maximum length of 10." 
			data-val-length-max="10" data-val-required="The Name field is required."
		id="Customer_Name" name="Customer.Name" value="">
1) To access the properties inside the cshtml page we must always add those Class inside the <NameOfThePage>Model.
	i.e. public class CreateModel : PageModel
		{			
			private readonly AppDbContext _db; 	//Line B		
			public Customer customer {get; set;} //Line C

			public CreateMode(AppDbContext db) // Line A
			{ 
				_db = db;
			}
		}
		Line A - This is a Constructor Dependency Injects
		Line B - This is to create a readonly AppDbContext.
		Line C - This is to access Customer Model inside the cshtml pages\razor pages
2) OnPostAsync()  - adding async - await means don't block the opertaions
	public async Task<IActionResult> OnPostAsync()
	{
		if(!ModelState.IsValid) { return Page(); } //Line A

		db.Customer.Add(Customer) //Line B -> 
		await db.SaveChangesAsync();  // Line C ->
		return RedirectToPage("/");  //Line D -> 
	}
	a) Line A ->  Page() -> Returns IActionResult & ModelState validation	
	b) Line B -> Prompting Customer Object into Database
	c) Line C -> Saving the changes from Page to DB 
	d) Line D -> Redirecting the Page to any other page or different sites
				 RedirectToPage("/") -> Gives error as "No Paged Named '/' matches the supplied values." 
										we have to add "/Index" for the route to work as page index is present
										302 Status 
		RedirectToPagePermanent ->  301 Status -> Move it permanently from the Page.
3) Run the Application : View Source - You will able to view some tags added inside the Customer input tags
						as per data annotations and it helps interperter for validations and other purpose's
4) [BindProperty] - If you want to fill the property from the data inputed inside the Razor Page we use this Attribute on that property
	i.e. For Being Time, On Post Action if you want to fill Customer property then we must decorate [BindProperty] in CreateModel class
		Attribute  on Customer Property as shown below
		[BindProperty]
		public Customer Customer { get; set;}
	After Adding [BindProperty], ModelState was able to check Model was in proper state or do validations.
5) Validation Summary : If we want to display all the validation(Summary) on the Razor page at one location
		then we must add below Tag Helper Attribute inside Form Tag
		e.g. <div asp-validation-summary="All"></div>
	This Above Code must be added inside the Form Tag other wise it won't work.
6) asp-validation-for -> This is use for showing validation on the location where we require(Custom)
	e.g. <span asp-validation-for"Customer.Name"/> Line A
	Line A : I was not able to view the Error Message as it was not closed as per proper standards 
			 i.e. <Opening Tag></Closing Tag>
			 Below Should works fine.
			 <span asp-validation-for="Customer.Name"></span>	
	Note : [
			The Tags used with Tag Helpers attributes must be closed properly()
			i.e. <p asp-*></p>
	]
7) RequestVerficationToken : Asp.net Core also add Request Vertification Token so that malicious user won't be able to temper with
							 our request\stuff.
		
